const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const bodyParser = require('body-parser');
const app = express();

// Настройки
app.use(cors());
app.use(bodyParser.json());

// Подключение к PostgreSQL
const pool = new Pool({
  user: 'admin',
  host: 'localhost',
  database: 'conv_tracker',
  password: 'your_password',
  port: 5432,
});

// Создание таблицы (выполнить один раз)
async function createTable() {
  try {
    await pool.query(`
      CREATE TABLE IF NOT EXISTS events (
        id SERIAL PRIMARY KEY,
        session_id VARCHAR(36) NOT NULL,
        website_id VARCHAR(50) NOT NULL,
        event_type VARCHAR(50) NOT NULL,
        timestamp TIMESTAMPTZ DEFAULT NOW(),
        data JSONB
      );
    `);
    console.log('Table created');
  } catch (err) {
    console.error('Error creating table:', err);
  }
}
createTable();

// Эндпоинт для приема данных
app.post('/api/collect', async (req, res) => {
  try {
    const events = Array.isArray(req.body) ? req.body : [req.body];
    const client = await pool.connect();

    await client.query('BEGIN');
    for (const event of events) {
      await client.query(
        `INSERT INTO events (session_id, website_id, event_type, timestamp, data)
         VALUES ($1, $2, $3, $4, $5)`,
        [
          event.session_id,
          event.website_id,
          event.event_type,
          new Date(event.timestamp || Date.now()),
          event.data || {}
        ]
      );
    }
    await client.query('COMMIT');
    client.release();

    res.status(200).json({ success: true, count: events.length });
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error saving events:', error);
    res.status(500).json({ success: false, error: error.message });
  }
});

// Запуск сервера
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});